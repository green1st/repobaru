"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWsAccountSnapshotEvent = isWsAccountSnapshotEvent;
exports.isWsPositionsSnapshotEvent = isWsPositionsSnapshotEvent;
exports.isWsFuturesAccountSnapshotEvent = isWsFuturesAccountSnapshotEvent;
exports.isWsFuturesPositionsSnapshotEvent = isWsFuturesPositionsSnapshotEvent;
exports.assertMarginType = assertMarginType;
exports.isWSAPIResponse = isWSAPIResponse;
/** TypeGuard: event has a string "action" property */
function isWsEvent(event) {
    return (typeof event === 'object' &&
        event &&
        (typeof event)['action'] === 'string' &&
        (typeof event)['data']);
}
/** TypeGuard: event has "action === snapshot" */
function isWsSnapshotEvent(event) {
    return isWsEvent(event) && event.action === 'snapshot';
}
/** TypeGuard: event has a string channel name */
function isWsChannelEvent(event) {
    if (typeof event['arg'] === 'object' &&
        event['arg'] &&
        typeof (typeof event['arg'])['channel'] === 'string') {
        return true;
    }
    return false;
}
/** TypeGuard: event is an account update (balance) */
function isWsAccountSnapshotEvent(event) {
    return (isWsSnapshotEvent(event) &&
        isWsChannelEvent(event) &&
        event.arg.channel === 'account' &&
        Array.isArray(event.data));
}
/** TypeGuard: event is a positions update */
function isWsPositionsSnapshotEvent(event) {
    return (isWsSnapshotEvent(event) &&
        isWsChannelEvent(event) &&
        event.arg.channel === 'positions' &&
        Array.isArray(event.data));
}
/** TypeGuard: event is a UMCBL account update (balance) */
function isWsFuturesAccountSnapshotEvent(event) {
    return isWsAccountSnapshotEvent(event) && event.arg.instType === 'umcbl';
}
/** TypeGuard: event is a UMCBL positions update */
function isWsFuturesPositionsSnapshotEvent(event) {
    return isWsPositionsSnapshotEvent(event) && event.arg.instType === 'umcbl';
}
/**
 * Simple guard for non-TypeScript users, throw a runtime error if value doesn't match type
 */
function assertMarginType(marginType) {
    if (marginType !== 'isolated' && marginType !== 'crossed') {
        throw new Error('MarginType should be one of: crossed | isolated');
    }
    return true;
}
function isWSAPIResponse(msg) {
    if (typeof msg !== 'object' || !msg) {
        return false;
    }
    if (typeof msg['event'] !== 'string' ||
        typeof msg['id'] !== 'string') {
        return false;
    }
    return true;
}
//# sourceMappingURL=type-guards.js.map